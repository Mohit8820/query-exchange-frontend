{"version":3,"file":"static/js/881.7d61e319.chunk.js","mappings":"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","sources":["pages/Auth/Auth.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../contexts/auth-context\";\nimport { useHttpClient } from \"../../hooks/http-hook\";\nimport ErrorModal from \"../../components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../components/UIElements/LoadingSpinner\";\nimport \"./Auth.css\";\nimport icon from \"../../assets/icon.jpg\";\n\nconst Auth = (props) => {\n  const auth = useContext(AuthContext);\n\n  const location = useLocation();\n\n  const [isSignup, setIsSignup] = useState(false);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const handleSwitch = () => {\n    setIsSignup(!isSignup);\n  };\n  const [user, setUser] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleChange = (event) => {\n    var { name, value } = event.target;\n    setUser((prevUser) => {\n      return {\n        ...prevUser,\n        [name]: value,\n      };\n    });\n  };\n  const navigate = useNavigate();\n\n  const authSubmitHandler = async () => {\n    console.log(\"validEmail\");\n    console.log(validEmail);\n    console.log(\"validPassword\");\n    console.log(validPassword);\n    var method = isSignup ? \"signup\" : \"login\";\n    var body = isSignup\n      ? {\n          name: user.name,\n          email: user.email,\n          password: user.password,\n        }\n      : {\n          email: user.email,\n          password: user.password,\n        };\n\n    try {\n      const responseData = await sendRequest(\n        process.env.REACT_APP_API_URL + \"/users/\" + method,\n        \"POST\",\n        JSON.stringify(body),\n        { \"Content-Type\": \"application/json\" }\n      );\n\n      auth.login(responseData.userId, responseData.token);\n      navigate(\"/home\");\n    } catch (err) {\n      console.log(err);\n\n      setUser({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (location.state === \"false\") setIsSignup(false);\n    else setIsSignup(true);\n    console.log(isSignup);\n  }, [location.state]);\n\n  const [validEmail, setValidEmail] = useState(null);\n  const [validPassword, setValidPassword] = useState(null);\n\n  const isValidEmail = (email) => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n\n  const checkValidation = (event) => {\n    event.preventDefault();\n    const re = new RegExp(\n      \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$\"\n    );\n    const isOk = re.test(user.password);\n    if (!isOk) {\n      setValidPassword(\"Password is invalid\");\n    } else {\n      setValidPassword(null);\n    }\n    console.log(\"pass\");\n    console.log(validPassword);\n    if (!isValidEmail(user.email)) {\n      setValidEmail(\"Email is invalid\");\n    } else {\n      setValidEmail(null);\n    }\n\n    if (isOk && isValidEmail(user.email)) {\n      authSubmitHandler();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n\n      <div className=\"auth-container\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        {!isSignup && (\n          <img src={icon} alt=\"stack overflow\" className=\"login-logo\" />\n        )}\n        <form onSubmit={checkValidation}>\n          {isSignup && (\n            <label htmlFor=\"name\">\n              <h4>Display Name</h4>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                onChange={handleChange}\n                value={user.name}\n                maxLength=\"6\"\n                required\n              />\n            </label>\n          )}\n\n          <label htmlFor=\"email\">\n            <h4>Email</h4>\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              onChange={handleChange}\n              value={user.email}\n              onClick={() => setValidEmail(null)}\n              //onBlur={validateEmail}\n              required\n            />\n            {validEmail && <span>{validEmail}</span>}\n          </label>\n\n          <label htmlFor=\"password\">\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <h4>Password</h4>\n              {/* {!isSignup && (\n                <p style={{ color: \"#007ac6\", fontSize: \"13px\" }}>\n                  forgot password?\n                </p>\n              )} */}\n            </div>\n            <input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              onChange={handleChange}\n              value={user.password}\n              onClick={() => setValidPassword(null)}\n              //onBlur={validatePassword}\n              required\n            />\n            {validPassword && <span>{validPassword}</span>}\n            {isSignup && (\n              <p style={{ color: \"#666767\", fontSize: \"13px\" }}>\n                Passwords must contain at least six characters, including at\n                least 1 letter and 1 number.\n              </p>\n            )}\n          </label>\n\n          <button type=\"submit\" className=\"filled-btn\">\n            {isSignup ? \"Sign up\" : \"Log in\"}\n          </button>\n        </form>\n        <p>\n          {isSignup ? \"Already have an account?\" : \"Don't have an account?\"}\n          <button type=\"button\" className=\"text-btn\" onClick={handleSwitch}>\n            {isSignup ? \"Log in\" : \"sign up\"}\n          </button>\n        </p>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"names":["props","auth","useContext","AuthContext","location","useLocation","useState","isSignup","setIsSignup","useHttpClient","isLoading","error","sendRequest","clearError","name","email","password","user","setUser","handleChange","event","target","value","prevUser","navigate","useNavigate","authSubmitHandler","console","log","validEmail","validPassword","method","body","process","JSON","stringify","responseData","login","userId","token","useEffect","state","setValidEmail","setValidPassword","isValidEmail","test","ErrorModal","onClear","className","LoadingSpinner","asOverlay","src","icon","alt","onSubmit","preventDefault","isOk","RegExp","htmlFor","type","id","onChange","maxLength","required","onClick","style","display","justifyContent","color","fontSize"],"sourceRoot":""}